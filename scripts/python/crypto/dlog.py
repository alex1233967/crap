#!/usr/bin/python3
'''compute discrete log modulo a prime p: h = g**x(mod p)'''
import gmpy2
from gmpy2 import mpz

p = mpz(13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171)
g = mpz(11717829880366207009516117596335367088558084999998952205599979459063929499736583746670572176471460312928594829675428279466566527115212748467589894601965568)
h = mpz(3239475104050450443565264378728065788649097520952449527834792452971981976143292558073856937958553180532878928001494706097394108577585732452307673444020333)

B = 2**20

# build a hash table
table = dict()
for x1 in range(B):
    left = gmpy2.mul(h, gmpy2.invert(gmpy2.powmod(g, x1, p), p)) % p
    table[left] = x1

# check if the right side is in this hash table
for x0 in range(B):
    right = gmpy2.powmod(gmpy2.powmod(g, B, p), x0, p)
    if right in table:
        x1 = table[right]
        x = x0 * B + x1
        break

print("x = {0}".format(x))
