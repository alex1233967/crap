#!/usr/bin/python3
'''Finding a small root of a bivariate integer equation;
factoring with high bits known. |pâˆ’q| < 2N^1/4'''
import gmpy2
from gmpy2 import mpz

N1 = mpz(179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581)
N2 = mpz(648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877)
N3 = mpz(720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929)
CT = mpz(22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540)


# Factoring challenge #1:
def q1(N):
    A = gmpy2.isqrt(N) + 1
    x = gmpy2.isqrt(A*A - N)
    p, q = A-x, A+x
    return p, q


# Factoring challenge #2:
def q2(N):
    A = gmpy2.isqrt(N) + 1
    for a in range(A, N):
        x = gmpy2.isqrt(a*a - N)
        p, q = a - x, a + x,
        if p*q == N:
            return p, q


# Factoring challenge #3:
def q3(N):
    A = 2 * gmpy2.isqrt(6*N3) + 1
    x = gmpy2.isqrt(A*A - 24*N3)
    p, q = gmpy2.c_div(A-x, 6), gmpy2.c_div(A+x, 4)
    return p, q


# Factoring challenge #4:
def q4(N):
    e = 65537
    p, q = q1(N)
    d = gmpy2.invert(e, (p-1)*(q-1))
    m = gmpy2.powmod(CT, d, N)
    pt = hex(m).split('00')[1]  # remove padding
    return bytes.fromhex(pt).decode()


if __name__ == "__main__":
    print("challenge 1 solution: ", min(q1(N1)))
    print("challenge 2 solution: ", min(q2(N2)))
    print("challenge 3 solution: ", min(q3(N3)))
    print("challenge 4 solution: ", q4(N1))
